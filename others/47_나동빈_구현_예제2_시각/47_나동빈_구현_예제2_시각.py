import sys

input = sys.stdin.readline


def check(hour, second, minute):
    # 시간은 1의 자리만 %10(10으로 나눈나머지)로 3을 확인하면 된다.
    if hour % 10 == 3: return True
    # 분은 1의자리 + 10의자리(//10, 10으로 나눈 몫)도 3이 오는지 검사
    if minute // 10 == 3 or minute % 10 == 3: return True
    if second // 10 == 3 or second % 10 == 3: return True
    return False


if __name__ == '__main__':
    ## 구현예제2: 시각
    # -> 00시00분00초 ~ N시 59분 59초까지의 모든 시각 중에서
    # K가 하나라도 포함되는 모든 경우의 수를 구하는 프로그램 작성
    # (0 ~23 N, 3 k)
    # ex> 00시 00분 03초   k=3
    #     00시 13분 30초

    # N = int(input().strip())

    ## 내풀이 -> 교환법칙성립하지않는 순열이므로.. 하나씩 나열한다?
    # 전체 - 3이 하나도 안포함된 것
    # 3*10 10*10 10*10 - (3*9 9*9 9*9)
    # N이 9이하일 경우...
    # if N <=9:
    #     # 0~N
    # [ ]  [ ]  [ ] 1자리씩이 아니라, 2자리씩 묶어서 생각하면 된다.?!
    # print((N+1)*6*10*6*10 - N*5*9*5*9)
    # k가 3일때는 쉽지만.. k가 7이상이라서 분/초에서는 불가한 숫자일 경우 1자리씩 생각?

    ## 풀이
    # 가능한 시각을 모두 세는 [완탐]문제이기도 하다.
    # -> 경우의수를 세려면, 하루는 24 * 60 * 60초 = 86,400초 -> 작은단위인 초로 환산하면 개별 초를 8만개만 세면된다.
    # -> python은 1초에2천만번 2*10**7 까지 가능하다고 생각하자.
    # => 시간복잡도가 1초에 2천만번 안에 들어온다면, 완전탐색 문제이다.

    h = int(input())

    # (1) 시간의 경우의 수를 세는 문제는 [1초]단위로 3중 반복문을 넘어가면 된다.
    # for 시 (0, 23+1) for 분 in (0, 59) for 초 (0, 59)
    # => 각 시에 대한, 각 분에 대한, 초가 60개씩 돌아간다.
    # => 이 때, 돌아가는 시분초 각각의 문자열로 만들어서 + 해주면 연결된다.
    count = 0
    for hour in range(h + 1):
        for minute in range(60):
            for second in range(60):
                # (2) 각 숫자들을 문자열로 변환하면, [특정 숫자의 포함여부]를 알 수 있따.
                # if '3' in str(hour) + str(minute) + str(second):
                # (3) c++이나 java에선 문자열로 만드는 과정이 복잡하기 때문에, 10의 자리 1의자리수를
                # -> 각각의 시/분/초마다 자리수를 직접 확인하는 check함수를 만들어쓴다.
                if check(hour, second, minute):
                    count += 1

    print(count)
