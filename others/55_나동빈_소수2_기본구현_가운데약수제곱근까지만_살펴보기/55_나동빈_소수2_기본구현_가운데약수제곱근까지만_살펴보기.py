import math
import sys
 
input = sys.stdin.readline


def is_prime_number(number):
    # (1) 2~x-1까지 수를 다 탐색할게 아니라
    #     2~x-1 중, x의 가운데 약수인 제곱근x까지만 나누어떨어지는지 검사해봐도
    #     그 이후의 수들은 앞에서 나누어본 수들의 곱으로 이루어졌기 때문에,
    #     2~제곱근 까지의 일반 수(원래 안나눠짐) + 약수들이 안나누어떨어졌다면 ->
    #     제곱근 이후의 후보 약수들은 [안나누어떨어진 것들의 자신을 구성하는 대칭곱셈]으로서 똑같이 안나누어떨어진다.
    # mid_factor = int(math.sqrt(number)) # 자신의 제곱근 혹은 제곱근보다 1 작은 수(가운데 대칭 중 왼쪽)
    mid_factor = int(number**(1/2)) # 자신의 제곱근 혹은 제곱근보다 1 작은 수(가운데 대칭 중 왼쪽)
    for k in range(2, mid_factor + 1):
        if number % k == 0:
            return False
    return True


if __name__ == '__main__':
    ## 소수2: 약수의 성질이용하여 시복(O(N))을 더 줄여서구현
    # -> 모든 약수는 [가운데 약수]기준으로 곱셈연산에 대칭
    # -> ex> 1 2 4 8 16 -> 4를 가준으로 곱이 같은 대칭
    # -> 2~x-1까지 다 뒤질께 아니라, 1과 자신을 포함한
    #    [가운데 약수==자신의 제곱근]까지만 확인하면,나머지는 곱이 일정하여 알 수 있음.
    #    ex> 16은 2를 약수로 가지는데, 16이 아니라 가운데약수인 루트16=4로 확인할 수 있다.

    # => 자신의 약수라면, 가운데약수인 제곱근의의 약수이며, 그 이후는 대칭값의 곱이기 때문에 약수판별을 할 필요가 없다.
    print(is_prime_number(4))
    print(is_prime_number(7))
    pass 
